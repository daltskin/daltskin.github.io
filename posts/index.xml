<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Hello_world</title>
        <link>https://jamied.me/posts/</link>
        <description>Recent content in Posts on Hello_world</description>
        <generator>Hugo -- gohugo.io</generator>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 21 Jul 2020 21:50:17 +0100</lastBuildDate>
        <atom:link href="https://jamied.me/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>GitHub Webhooks With C# Azure Functions</title>
            <link>https://jamied.me/github-webhooks-with-azure-functions/</link>
            <pubDate>Tue, 21 Jul 2020 21:50:17 +0100</pubDate>
            
            <guid>https://jamied.me/github-webhooks-with-azure-functions/</guid>
            <description>Recently I wanted to build a GitHub webhook using C# Azure Functions, but could only find an example template using Node.js. Here, I set out to create a webhook to check the overall status of a build. This is something I was doing around 10 years ago with Team Foundation Server, so thought it would be fun to get this up and running with GitHub Actions.
Check Suites Looking at the available webhook events there wasn&amp;rsquo;t an obvious event I could subscribe to get what I wanted.</description>
            <content type="html"><![CDATA[

<p>Recently I wanted to build a GitHub webhook using C# Azure Functions, but could only find an example template using <a href="https://docs.microsoft.com/en-us/learn/modules/monitor-github-events-with-a-function-triggered-by-a-webhook/" target="_blank">Node.js</a>.  Here, I set out to create a webhook to check the overall status of a build.  This is something I was doing around 10 years ago with Team Foundation Server, so thought it would be fun to get this up and running with <a href="https://github.com/features/actions" target="_blank">GitHub Actions</a>.</p>

<h2 id="check-suites">Check Suites</h2>

<p>Looking at the <a href="https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads" target="_blank">available webhook events</a> there wasn&rsquo;t an obvious event I could subscribe to get what I wanted.  Currently, there isn&rsquo;t an OTB event for when workflows complete.  This has been asked a couple of times on the <a href="https://github.community/t/github-webhooks-to-notify-when-workflows-are-completed/118941" target="_blank">GitHub community</a> - so I hope will be addressed soon.  In addition, there are some marketplace solutions for Webhook Actions: <a href="https://github.com/marketplace/actions/webhook-action" target="_blank">Webhook Action</a> and <a href="https://github.com/marketplace/actions/workflow-webhook-action" target="_blank">Workflow Webhook Action</a> which you can use anywhere within your workflows to trigger a webhook.</p>

<p>Meanwhile, I settled on the <a href="https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#check_suite" target="_blank">check suite</a> event subscription since it returns the summary <code>conclusion</code> for all the check runs that are part of a check suite.  By default, GitHub creates a check suite automatically when code is pushed to the repository.</p>

<p><img src="/img/webhook check suites event.png"></p>

<h2 id="c-azure-function-webhook">C# Azure Function webhook</h2>

<p>To create the endpoint that GitHub calls, I wanted to use a lightweight serverless approach.  Using Visual Studio you can use the C# Azure Function HTTP Trigger template to get up and running quickly.  The below code extract shows how the received json payload can be deserialized and interrogated.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">GitHubWebhook</span>
{
<span style="color:#a6e22e">    [FunctionName(&#34;GitHubWebhook&#34;)]</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">async</span> Task&lt;IActionResult&gt; Run(
<span style="color:#a6e22e">        [HttpTrigger(AuthorizationLevel.Function, &#34;post&#34;, Route = null)]</span> HttpRequest req, 
        ILogger log)
    {
        log.LogInformation(<span style="color:#e6db74">&#34;C# Webhook for GitHub.&#34;</span>);
        <span style="color:#66d9ef">string</span> requestBody = <span style="color:#66d9ef">await</span> <span style="color:#66d9ef">new</span> StreamReader(req.Body).ReadToEndAsync();
        CheckSuiteStatus suiteStatus = JsonConvert.DeserializeObject&lt;CheckSuiteStatus&gt;(requestBody);
        <span style="color:#66d9ef">string</span> responseMessage = <span style="color:#e6db74">$&#34;The GitHub Check Suite status for {suiteStatus.check_suite.id} {suiteStatus.action} with {suiteStatus.check_suite.conclusion}&#34;</span>;
        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> OkObjectResult(responseMessage);            
    }
}
</code></pre></div>
<p>An extract of the <code>application/json</code> payload GitHub sends for the <code>check suites</code> event can be seen below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;action&#34;</span>: <span style="color:#e6db74">&#34;completed&#34;</span>,
  <span style="color:#f92672">&#34;check_suite&#34;</span>: {
    <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#ae81ff">941142538</span>,
    <span style="color:#f92672">&#34;head_branch&#34;</span>: <span style="color:#e6db74">&#34;master&#34;</span>,
    <span style="color:#f92672">&#34;status&#34;</span>: <span style="color:#e6db74">&#34;completed&#34;</span>,
    <span style="color:#f92672">&#34;conclusion&#34;</span>: <span style="color:#e6db74">&#34;success&#34;</span>,
    <span style="color:#f92672">&#34;app&#34;</span>: {
      <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#ae81ff">15368</span>,
      <span style="color:#f92672">&#34;slug&#34;</span>: <span style="color:#e6db74">&#34;github-actions&#34;</span>,
      <span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;GitHub Actions&#34;</span>,
      <span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;Automate your workflow from idea to production&#34;</span>,
      <span style="color:#f92672">&#34;external_url&#34;</span>: <span style="color:#e6db74">&#34;https://help.github.com/en/actions&#34;</span>,
      <span style="color:#f92672">&#34;html_url&#34;</span>: <span style="color:#e6db74">&#34;https://github.com/apps/github-actions&#34;</span>,
    }
  }
}</code></pre></div>
<p>For an example of the full payload go here: <a href="https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#webhook-payload-example-1" target="_blank">webhook payload example</a>.</p>

<h2 id="debugging-with-tunnel-relay">Debugging with Tunnel Relay</h2>

<p>Whilst debugging, GitHub needs a public addressable endpoint to invoke.  Obviously this is a problem if you&rsquo;re hosting on localhost, so you can use a tool like <a href="https://ngrok.com/" target="_blank">ngrok</a>.  However, I&rsquo;ve chosen to use the relatively new (and free) <a href="https://github.com/OfficeDev/microsoft-teams-tunnelrelay" target="_blank">Tunnel Relay</a> tool which creates a secure tunnel using Azure Relay with a static address ðŸ˜€</p>

<p><img src="/img/webhook tunnel relay.png"></p>

<p>In the screenshot above you can see the Azure Function 200 result that has been sent back to GitHub.  We don&rsquo;t expect GitHub to actually do anything with this response - but we can use it to check our Azure Function is working ok.</p>

<p><img src="/img/webhook running.png"></p>

<h2 id="workflow-manual-triggers">Workflow Manual Triggers</h2>

<p>To make the development cycle quicker, I used a manual trigger using the new <a href="https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/" target="_blank">workflow_dispatch</a>.  Adding the following lines to an existing workflow, means that you can manually invoke it:</p>

<p>so my workflow yaml now looks like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">name: .NET Core

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: <span style="color:#e6db74">&#39;Log level&#39;</span>     
        required: <span style="color:#66d9ef">true</span>
        default: <span style="color:#e6db74">&#39;warning&#39;</span></code></pre></div>
<p>So you can now trigger it from the Actions tab without having to perform any commits:</p>

<p><img src="/img/workflow dispatch.png"></p>

<h2 id="securing-the-webhook">Securing the Webhook</h2>

<p>We want to ensure our trigger can only get called by GitHub and not some other spurious source.  So we set a secret in the Webhooks Manage page:</p>

<p><img src="/img/webhook secret.png"></p>

<p>GitHub will use this secret to create a hash signature of the entire payload and pass the signature within the <code>X-Hub-Signature</code> request header.  Within our C# Azure Function we also need to store the same environment setting as <code>Secret</code> so we can compute a hash on the payload and check that it matches the one we&rsquo;ve been sent from GitHub.  If running locally, you can set this in the the local.settings.json file eg:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
  <span style="color:#f92672">&#34;IsEncrypted&#34;</span>: <span style="color:#66d9ef">false</span>,
  <span style="color:#f92672">&#34;Values&#34;</span>: {
    <span style="color:#f92672">&#34;AzureWebJobsStorage&#34;</span>: <span style="color:#e6db74">&#34;UseDevelopmentStorage=true&#34;</span>,
    <span style="color:#f92672">&#34;FUNCTIONS_WORKER_RUNTIME&#34;</span>: <span style="color:#e6db74">&#34;dotnet&#34;</span>,
    <span style="color:#f92672">&#34;Secret&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>
  }
}</code></pre></div>
<p>For more details on how GitHub recommends you secure webhooks see <a href="https://docs.github.com/en/developers/webhooks-and-events/securing-your-webhooks#validating-payloads-from-github" target="_blank">Securing your webhooks</a>.  To implement this, I&rsquo;ve used a simple Validate function:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">bool</span> Validate (<span style="color:#66d9ef">string</span> signature, <span style="color:#66d9ef">string</span> body, <span style="color:#66d9ef">string</span> secret)
{
    <span style="color:#66d9ef">string</span> expectedSignature = <span style="color:#e6db74">&#34;sha1=&#34;</span> + HMACSHA256(secret, body);
    <span style="color:#66d9ef">return</span> expectedSignature.Equals(signature);
}
</code></pre></div>
<h2 id="publish-to-azure-functions">Publish to Azure Functions</h2>

<p>Here I&rsquo;ve used the <code>[HttpTrigger(AuthorizationLevel.Function)]</code>, so we need to grab the <a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-http-webhook-trigger?tabs=csharp#authorization-keys" target="_blank">Function access key</a> from the Azure portal:</p>

<p><img src="/img/function key.png"></p>

<p>This now forms part of the <code>?code=</code> querystring of the webhook Payload URL in the GitHub Webhook Manage page - which we now need to update from our development Tunnel Relay address.  The URL should look something like this: https://{yourfunc}.azurewebsites.net/api/GitHubWebhook?code=abcdefg123456==</p>

<h2 id="testing">Testing</h2>

<p>Finally, to ensure everything is hooked up and all the configuration is correct - let&rsquo;s manually trigger a workflow using workflow_dispatch and monitor the Azure Function at the same time.</p>

<p><video src="/video/GitHubAFWebhook.mp4" controls width=800></p>

<p>Full code here: <a href="https://github.com/daltskin/GitHubWebhookPlayground" target="_blank">GitHub Webhook Playground</a>.  This particular webhook doesn&rsquo;t actually do anything useful, other than interrogate the check suite conclusion and return a message back in the response payload to GitHub.  I plan to use this same mechanism to integrate GitHub into SmartThings, which I&rsquo;ll cover in a later post.</p>
]]></content>
        </item>
        
        <item>
            <title>LUIS DevOps with Github Actions</title>
            <link>https://jamied.me/posts/2020/05/luis-devops-with-github-actions/</link>
            <pubDate>Thu, 21 May 2020 16:58:32 +0100</pubDate>
            
            <guid>https://jamied.me/posts/2020/05/luis-devops-with-github-actions/</guid>
            <description>Implementing good DevOps practices with the LUIS Cognitive Service has been traditionally hard. Largely because the initial focus of the service has been on the underlying performance and on the portal experience - making a complex machine learning problem easy to use by any developer. In fact, now the portal is so easy to use, it can be used by non-developers too, such as business folk and even content editors.</description>
            <content type="html"><![CDATA[

<p>Implementing good DevOps practices with the LUIS Cognitive Service has been traditionally hard.  Largely because the initial focus of the service has been on the underlying performance and on the portal experience - making a complex machine learning problem easy to use by any developer.  In fact, now the portal is so easy to use, it can be used by non-developers too, such as business folk and even content editors.  The downside to this initial engineering focus, was that there was limited public API capability that you could leverage in order to automate some of the more ardous tasks typcially faced by enterprise organisations such as:</p>

<ul>
<li>Limited support for different environments</li>
<li>No/fragmented CLI tooling</li>
<li>Limited testing capability</li>
</ul>

<p><em>But, over the last 12+ months things have steady improved and much of these challenges have been addressed</em></p>

<h3 id="luis-multiple-api-endpoints-for-authoring-predictions">LUIS Multiple API Endpoints for authoring &amp; predictions:</h3>

<p>LUIS now offers a much richer public API, including separate endpoints:</p>

<ul>
<li>LUIS API Authoring: <a href="https://westus.dev.cognitive.microsoft.com/docs/services/luis-programmatic-apis-v3-0-preview" target="_blank">https://westus.dev.cognitive.microsoft.com/docs/services/luis-programmatic-apis-v3-0-preview</a></li>
<li>LUIS API Predictions: <a href="https://westus.dev.cognitive.microsoft.com/docs/services/luis-endpoint-api-v3-0" target="_blank">https://westus.dev.cognitive.microsoft.com/docs/services/luis-endpoint-api-v3-0</a></li>
</ul>

<h3 id="convergence-of-bot-framework-luis-cli-tooling">Convergence of Bot Framework/LUIS CLI Tooling</h3>

<p>What was once a fragmented toolset has now been converged into a single Bot Framework CLI tool:</p>

<ul>
<li>Bot Framework CLI: <a href="https://docs.microsoft.com/en-us/azure/bot-service/bf-cli-overview?view=azure-bot-service-4.0" target="_blank">https://docs.microsoft.com/en-us/azure/bot-service/bf-cli-overview?view=azure-bot-service-4.0</a></li>
</ul>

<h3 id="devops-focus">DevOps Focus</h3>

<p>A set of DevOps tools for NLU services, including easy to use Azure DevOps Pipelines Tasks that do the heavy lifting for training/testing LUIS models:</p>

<ul>
<li>NLU.DevOps: <a href="https://github.com/microsoft/NLU.DevOps" target="_blank">https://github.com/microsoft/NLU.DevOps</a></li>
</ul>

<h2 id="luis-devops-with-github">LUIS DevOps with Github</h2>

<p>Now, there is guidance and best practice advice for settingup Github Actions: <a href="https://github.com/Azure-Samples/LUIS-DevOps-Template" target="_blank">https://github.com/Azure-Samples/LUIS-DevOps-Template</a>
which includes:</p>

<ul>
<li>Documentation</li>
<li>End-to-end walkthrough</li>
</ul>

<p>Covering:</p>

<ul>
<li>Github flow branch management</li>
<li>Setting up build agent dependencies</li>
<li>Handling secrets/environment variables</li>
<li>Azure authentication</li>
<li>Leveraging bf &amp; NLU.DevOps cli tools</li>
<li>Testing models</li>
<li>Analyzing model performance</li>
<li>Publishing models</li>
</ul>

<h3 id="continuous-integration-workflow-architecture">Continuous Integration Workflow architecture</h3>

<p>For the complete <a href="https://github.com/Azure-Samples/LUIS-DevOps-Template/blob/develop/.github/workflows/luis_ci.yaml" target="_blank">CI workflow</a> you can look in the repo, but it&rsquo;s useful to understand the key stages within the process:</p>

<p><img src="/img/luis_ci_workflow.png"></p>

<p>Note here, the initial publish of the model uses <code>curl post</code> rather than the <code>bf luis:application:publish</code> - at the time of writing this blog, there is is an issue with the bf cli tool when using the <code>--direct</code> publish switch.  However, this has now been addressed via this <a href="https://github.com/microsoft/botframework-cli/pull/798" target="_blank">PR</a> and will be in the next release of the tooling.</p>

<h3 id="pull-request-workflow-architecture">Pull Request Workflow architecture</h3>

<p>The <a href="https://github.com/Azure-Samples/LUIS-DevOps-Template/blob/develop/.github/workflows/luis_pr.yaml" target="_blank">PR workflow</a> is much simpler:</p>

<p><img src="/img/luis_pr_workflow.png"></p>

<p>So, if you&rsquo;re interested in setting up Github Actions with LUIS - go check out the new resource: <a href="https://github.com/Azure-Samples/LUIS-DevOps-Template" target="_blank">https://github.com/Azure-Samples/LUIS-DevOps-Template</a></p>
]]></content>
        </item>
        
        <item>
            <title>Windows Terminal Command Line</title>
            <link>https://jamied.me/posts/2020/02/windows-terminal-command-line/</link>
            <pubDate>Fri, 14 Feb 2020 14:01:08 +0000</pubDate>
            
            <guid>https://jamied.me/posts/2020/02/windows-terminal-command-line/</guid>
            <description>Following on from my previous post about WSL Shortcuts - Windows Terminal v0.9 Release finally introduces command line support.
You can now combine this with an old File Explorer task bar trick to bootstrap your awesomeness.
Windows Files Explorer &amp;amp; Windows Terminal All of command line parameters that are supported are documented here. One nice trick is using split-pane to support different platforms simultaneously. So the following will open up a pane with both Powershell and Ubuntu side-by-side :)</description>
            <content type="html"><![CDATA[

<p>Following on from my <a href="../../../2019/11/wsl-shortcuts/">previous post about WSL Shortcuts</a> - <a href="https://github.com/microsoft/terminal/releases/tag/v0.9.433.0" target="_blank">Windows Terminal v0.9 Release</a> finally introduces command line support.</p>

<p>You can now combine this with an old <a href="https://blogs.msdn.microsoft.com/jamiedalton/2017/08/03/windows-productivity-tip-file-explorer-command-prompt-and-back-from-the-current-directory/" target="_blank">File Explorer task bar trick</a> to bootstrap your awesomeness.</p>

<h2 id="windows-files-explorer-windows-terminal">Windows Files Explorer &amp; Windows Terminal</h2>

<p>All of command line parameters that are supported are documented <a href="https://github.com/microsoft/terminal/blob/master/doc/user-docs/UsingCommandlineArguments.md" target="_blank">here</a>. One nice trick is using <code>split-pane</code> to support different platforms simultaneously.  So the following will open up a pane with both Powershell and Ubuntu side-by-side :)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">wt split-pane -p Ubuntu</code></pre></div>
<p>In the below video, my default command line is Powershell.  I&rsquo;m then executing both a Windows batch file and a Bash script simultaneously - both are downloading images to the same folder.</p>

<p><video src="/video/Windows Terminal.mp4" controls width=800></p>

<h2 id="windows-terminal-starting-folder">Windows Terminal Starting Folder</h2>

<p>As a side note, the default starting folder for each command line can be set in by the <code>startingDirectory</code> property for both environments in the profiles.json file eg:</p>

<pre><code>{
    &quot;acrylicOpacity&quot; : 0.75,
    &quot;closeOnExit&quot; : true,
    &quot;colorScheme&quot; : &quot;Campbell&quot;,
    &quot;commandline&quot; : &quot;cmd.exe&quot;,
    &quot;cursorColor&quot; : &quot;#FFFFFF&quot;,
    &quot;cursorShape&quot; : &quot;bar&quot;,
    &quot;fontFace&quot; : &quot;Consolas&quot;,
    &quot;fontSize&quot; : 10,
    &quot;guid&quot; : &quot;{0caa0dad-35be-5f56-a8ff-afceeeaa6101}&quot;,
    &quot;historySize&quot; : 9001,
    &quot;icon&quot; : &quot;ms-appx:///ProfileIcons/{0caa0dad-35be-5f56-a8ff-afceeeaa6101}.png&quot;,
    &quot;name&quot; : &quot;cmd&quot;,
    &quot;padding&quot; : &quot;0, 0, 0, 0&quot;,
    &quot;snapOnInput&quot; : true,
    &quot;startingDirectory&quot; : &quot;c://Github&quot;,
    &quot;useAcrylic&quot; : true
},
{
    &quot;acrylicOpacity&quot; : 0.5,
    &quot;closeOnExit&quot; : true,
    &quot;colorScheme&quot; : &quot;Campbell&quot;,
    &quot;commandline&quot; : &quot;wsl.exe -d Ubuntu&quot;,
    &quot;cursorColor&quot; : &quot;#FFFFFF&quot;,
    &quot;cursorShape&quot; : &quot;bar&quot;,
    &quot;fontFace&quot; : &quot;Consolas&quot;,
    &quot;fontSize&quot; : 10,
    &quot;guid&quot; : &quot;{2c4de342-38b7-51cf-b940-2309a097f518}&quot;,
    &quot;historySize&quot; : 9001,
    &quot;icon&quot; : &quot;ms-appx:///ProfileIcons/{9acb9455-ca41-5af7-950f-6bca1bc9722f}.png&quot;,
    &quot;name&quot; : &quot;Ubuntu&quot;,
    &quot;padding&quot; : &quot;0, 0, 0, 0&quot;,
    &quot;snapOnInput&quot; : true,
    &quot;useAcrylic&quot; : false,
    &quot;startingDirectory&quot; : &quot;c://Github&quot;,
},
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>WSL Shortcuts</title>
            <link>https://jamied.me/posts/2019/11/wsl-shortcuts/</link>
            <pubDate>Mon, 25 Nov 2019 09:24:13 +0000</pubDate>
            
            <guid>https://jamied.me/posts/2019/11/wsl-shortcuts/</guid>
            <description>A while back I posted a couple of Windows productivity tips:
 File Explorer &amp;lt;&amp;gt; Command Prompt
 File Explorer &amp;gt; VS Code
  Windows Files Explorer &amp;amp; WSL.EXE Now that Windows SubSystem Linux is here, what if we want to drop straight from Windows File Explorer to, for example, the Ubuntu command line? So, assuming you have WSL already setup, type wsl straight into the Windows Explorer bar:</description>
            <content type="html"><![CDATA[

<p>A while back I posted a couple of Windows productivity tips:</p>

<ul>
<li><p><a href="https://blogs.msdn.microsoft.com/jamiedalton/2017/08/03/windows-productivity-tip-file-explorer-command-prompt-and-back-from-the-current-directory/" target="_blank">File Explorer &lt;&gt; Command Prompt</a></p></li>

<li><p><a href="https://blogs.msdn.microsoft.com/jamiedalton/2017/08/11/windows-productivity-tip-2-file-explorer-vs-code-at-the-current-directory/" target="_blank">File Explorer &gt; VS Code</a></p></li>
</ul>

<h2 id="windows-files-explorer-wsl-exe">Windows Files Explorer &amp; WSL.EXE</h2>

<p>Now that <a href="https://docs.microsoft.com/en-us/windows/wsl/about" target="_blank">Windows SubSystem Linux</a> is here, what if we want to drop straight from Windows File Explorer to, for example, the Ubuntu command line?  So, assuming you have WSL already setup, type <code>wsl</code> straight into the Windows Explorer bar:</p>

<p><video src="/video/WSL.mp4" controls width=800></p>

<p>Pretty awesome right?</p>

<p>So now you can do all sorts of useful things straight on your Windows filesystem, but from Linux.  Take for example this *.gz file I have, I don&rsquo;t have <a href="https://www.7-zip.org/" target="_blank">7-Zip</a> installed on my Windows machine, but now I don&rsquo;t need to bother installing it - as I can use the built-in gunzip support from Ubuntu:</p>

<p><video src="/video/gunzip.mp4" controls width=800></p>
]]></content>
        </item>
        
        <item>
            <title>WebWindow</title>
            <link>https://jamied.me/posts/2019/11/webwindow/</link>
            <pubDate>Thu, 21 Nov 2019 21:00:00 +0000</pubDate>
            
            <guid>https://jamied.me/posts/2019/11/webwindow/</guid>
            <description>This week Steve Sanderson blogged again, this time introducing his latest wizardry WebWindow - a lightweight cross-platform webview library for .NET Core.
He also shared the full source code and provided some great examples on what&amp;rsquo;s possible:
I&amp;rsquo;ve spent the last couple of evenings experimenting with this a bit. Whilst it&amp;rsquo;s &amp;lsquo;super-pre-alpha quality&amp;rsquo;, it&amp;rsquo;s pretty damn awesome.
Docker Using this in conjunction with Docker.DotNet was my first experiment. Rather than bring web content into the project, why not let Docker do the local hosting.</description>
            <content type="html"><![CDATA[

<p>This week <a href="https://twitter.com/StevenSanderson" target="_blank">Steve Sanderson</a> blogged again, this time introducing his latest wizardry <a href="https://blog.stevensanderson.com/2019/11/18/2019-11-18-webwindow-a-cross-platform-webview-for-dotnet-core/" target="_blank">WebWindow</a> - a lightweight cross-platform webview library for .NET Core.</p>

<p>He also shared the full <a href="https://github.com/SteveSandersonMS/WebWindow" target="_blank">source code</a> and provided some great <a href="https://github.com/SteveSandersonMS/WebWindow/tree/master/samples" target="_blank">examples</a> on what&rsquo;s possible:</p>

<p>I&rsquo;ve spent the last couple of evenings experimenting with this a bit.  Whilst it&rsquo;s &lsquo;super-pre-alpha quality&rsquo;, it&rsquo;s pretty damn awesome.</p>

<h2 id="docker">Docker</h2>

<p>Using this in conjunction with <a href="https://github.com/microsoft/docker.dotnet" target="_blank">Docker.DotNet</a> was my first experiment.  Rather than bring web content into the project, why not let Docker do the local hosting.  So assuming you&rsquo;ve got Docker already setup on your developer machine, this is something you can play with.</p>

<p>I tried this first with the <a href="https://hub.docker.com/r/pengbai/docker-supermario/" target="_blank">docker-supermario</a> container by <a href="https://github.com/PengBAI" target="_blank">Peng BAI</a>, of Infinite Mario in HTML5 Javascript - the results were very impressive.</p>

<p><video src="/video/SuperMario.mp4" controls width=800></p>

<h2 id="hosted-html">Hosted HTML</h2>

<p>This time I experimented with the cross-platform aspect to this.  Using a hosted website, in this case <a href="https://mrdoob.com/lab/javascript/effects/solitaire/" target="_blank">Solitaire</a> by <a href="https://twitter.com/mrdoob" target="_blank">Mr Doob</a>.</p>

<p>I compiled both a standalone runtime for Windows and Linux using:</p>

<h3 id="windows">Windows</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">dotnet publish -o publish -c Debug -r win10-x64 /p<span style="color:#960050;background-color:#1e0010">:</span>PublishSingleFile=true /p<span style="color:#960050;background-color:#1e0010">:</span>PublishTrimmed=true</code></pre></div>
<h3 id="linux">Linux</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">dotnet publish -o publish -c Debug -r linux-x64 /p:PublishSingleFile<span style="color:#f92672">=</span>true /p:PublishTrimmed<span style="color:#f92672">=</span>true</code></pre></div>
<p>The runtime sizes were 27,450KB and 36,744KB respectively.</p>

<p>Then it was time to test them both.  Using <a href="https://www.microsoft.com/en-us/p/windows-terminal-preview/9n0dx20hk701" target="_blank">Windows Terminal</a> and WSL (Ubuntu) here&rsquo;s what happened:</p>

<p><video src="/video/Solitaire.mp4" controls width=800></p>

<p>So what next?  Well, anything that&rsquo;s web related can be now hosted in this simple component.  Experimenting further, I just built a new Microsoft Teams client ;)</p>

<p><img src="/img/WebWindow MS Teams.png"></p>

<p>So, if you&rsquo;re a dab hand a C++ and want to help Steve advance this project, reach out to him at his repo: <a href="https://github.com/SteveSandersonMS/WebWindow" target="_blank">https://github.com/SteveSandersonMS/WebWindow</a></p>

<p>My own fork containing the above samples is here: <a href="https://github.com/daltskin/WebWindow" target="_blank">https://github.com/daltskin/WebWindow</a></p>
]]></content>
        </item>
        
        <item>
            <title>Pulumi Azure Bot Service</title>
            <link>https://jamied.me/posts/2019/11/pulumi-azure-bot-service/</link>
            <pubDate>Sun, 17 Nov 2019 20:08:06 +0000</pubDate>
            
            <guid>https://jamied.me/posts/2019/11/pulumi-azure-bot-service/</guid>
            <description>Pulumi IaaC =&amp;gt; IaaC# (Infrastructure as CSharp) - Deploying Azure bots with Pulumi I&amp;rsquo;ll admit that, until a week ago, I had never heard of Pulumi, but when they recently announced support for .NET - they got my attention. I&amp;rsquo;ve worked alot with JSON based Azure Resource Manager (ARM) templates in the past - but these quickly become complicated to author when you have many different Azure resources.
Whilst Terraform offers it&amp;rsquo;s own HashiCorp Configuration Language (HCL), that or working with YAML makes a bit of me want to die - the syntax seems we&amp;rsquo;ve gone back an era in computing.</description>
            <content type="html"><![CDATA[

<p><img src="/img/pulumi.png"></p>

<h2 id="pulumi-iaac-iaac-infrastructure-as-csharp-deploying-azure-bots-with-pulumi">Pulumi IaaC =&gt; IaaC# (Infrastructure as CSharp) - Deploying Azure bots with Pulumi</h2>

<p>I&rsquo;ll admit that, until a week ago, I had never heard of <a href="pulimi.com" target="_blank">Pulumi</a>, but when they recently announced <a href="https://www.pulumi.com/blog/dotnet-preview/" target="_blank">support for .NET</a> - they got my attention.  I&rsquo;ve worked alot with JSON based <a href="https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-authoring-templates" target="_blank">Azure Resource Manager</a> (ARM) templates in the past - but these quickly become complicated to author when you have many different Azure resources.</p>

<p>Whilst Terraform offers it&rsquo;s own <a href="https://github.com/hashicorp/hcl" target="_blank">HashiCorp Configuration Language</a> (HCL), that or working with YAML makes a bit of me want to die - the syntax seems we&rsquo;ve gone back an era in computing.  So, after Pulumi&rsquo;s C# announcement I wanted to take a further look and see what the noise was all about.  What better way to kick the tyres than to deploy a brand new Azure Bot Service instance directly into Azure.</p>

<p>You can read about the <a href="https://www.pulumi.com/docs/intro/concepts/" target="_blank">Pulumi architecture and high level concepts</a>, to understand some of the basics and terminology.  Under the covers Pulumi uses the Azure GO SDK which calls the Azure Management API.  Once you&rsquo;ve configured your IaaC, you can then integrate it into <a href="https://www.pulumi.com/docs/guides/continuous-delivery/azure-devops/" target="_blank">Azure DevOps Pipelines</a> or <a href="https://www.pulumi.com/docs/guides/continuous-delivery/github-actions/" target="_blank">GitHub Actions</a>.</p>

<h3 id="deploying-azure-bot-service-with-pulumi-c-sdk">Deploying Azure Bot Service with Pulumi C# SDK</h3>

<p>Essentially to deploy a Web App Bot within Azure Bot Services (ABS) requires several things:</p>

<table>
<thead>
<tr>
<th>Azure resource</th>
<th>Description</th>
<th>Optional</th>
</tr>
</thead>

<tbody>
<tr>
<td>Resource Group</td>
<td>Container for the Azure resources</td>
<td></td>
</tr>

<tr>
<td>AAD Application ID and secret</td>
<td>AAD App registration and Authentication for the bot</td>
<td></td>
</tr>

<tr>
<td>App Service Plan</td>
<td>Defined set of compute resources for web app</td>
<td></td>
</tr>

<tr>
<td>AppService</td>
<td>Web API of the bot application</td>
<td></td>
</tr>

<tr>
<td>Bot Service</td>
<td>ABS bot registration</td>
<td></td>
</tr>

<tr>
<td>Application Insights</td>
<td>Telemetry/logging for bot application</td>
<td>*</td>
</tr>

<tr>
<td>Cognitive Services</td>
<td>Universal key for LUIS/QnA Maker etc</td>
<td>*</td>
</tr>
</tbody>
</table>

<h3 id="declaring-this-in-pulumi-csharp">Declaring this in Pulumi CSharp</h3>

<p>Let&rsquo;s take a look at the individual code segments that can be used to provision the above Azure services.  A link to a complete sample is provided at the bottom of this post:</p>

<h4 id="azure-resource-group">Azure Resource Group</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">var</span> resourceGroup = <span style="color:#66d9ef">new</span> ResourceGroup(<span style="color:#e6db74">&#34;botservice-rg&#34;</span>);
</code></pre></div>
<h4 id="azure-ad-application-registration">Azure AD Application Registration</h4>

<p>This requires the additional <a href="https://www.nuget.org/packages/Pulumi.AzureAD/" target="_blank">Pulumi.Azuread</a> provider nuget package (this took me a while to figure out).</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">var</span> msa = <span style="color:#66d9ef">new</span> Application(<span style="color:#e6db74">&#34;msapp&#34;</span>, <span style="color:#66d9ef">new</span> ApplicationArgs
{
    Oauth2AllowImplicitFlow = <span style="color:#66d9ef">false</span>,
    AvailableToOtherTenants = <span style="color:#66d9ef">true</span>,
    PublicClient = <span style="color:#66d9ef">true</span>
});
</code></pre></div>
<h4 id="azure-ad-application-secret">Azure AD Application Secret</h4>

<p>Here we can use the additional <a href="https://www.nuget.org/packages/Pulumi.Random" target="_blank">Pulumi.Random</a> provider nuget package to generate a strong password for the secret value and use that for the application password.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">var</span> pwd = <span style="color:#66d9ef">new</span> Random.RandomPassword(<span style="color:#e6db74">&#34;password&#34;</span>, <span style="color:#66d9ef">new</span> Random.RandomPasswordArgs
{
    Length = <span style="color:#ae81ff">16</span>,
    MinNumeric = <span style="color:#ae81ff">1</span>,
    MinSpecial = <span style="color:#ae81ff">1</span>,
    MinUpper = <span style="color:#ae81ff">1</span>,
    MinLower = <span style="color:#ae81ff">1</span>
});

<span style="color:#66d9ef">var</span> msaSecret = <span style="color:#66d9ef">new</span> ApplicationPassword(<span style="color:#e6db74">&#34;msasecret&#34;</span>, <span style="color:#66d9ef">new</span> ApplicationPasswordArgs
{
    ApplicationObjectId = msa.ObjectId,
    EndDateRelative = <span style="color:#e6db74">&#34;8640h&#34;</span>, <span style="color:#75715e">// set whatever expiry you want
</span><span style="color:#75715e"></span>    Value = pwd.Result
});
</code></pre></div>
<h4 id="azure-app-service-plan">Azure App Service Plan</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">var</span> appServicePlan = <span style="color:#66d9ef">new</span> Plan(<span style="color:#e6db74">&#34;asp&#34;</span>, <span style="color:#66d9ef">new</span> PlanArgs
{
    ResourceGroupName = resourceGroup.Name,
    Kind = <span style="color:#e6db74">&#34;App&#34;</span>,
    Sku = <span style="color:#66d9ef">new</span> PlanSkuArgs
    {
        Tier = <span style="color:#e6db74">&#34;Basic&#34;</span>,
        Size = <span style="color:#e6db74">&#34;B1&#34;</span>
    },
});
</code></pre></div>
<h4 id="azure-application-insights">Azure Application Insights</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">var</span> appInsights = <span style="color:#66d9ef">new</span> AppInsights.Insights(<span style="color:#e6db74">&#34;ai&#34;</span>, <span style="color:#66d9ef">new</span> AppInsights.InsightsArgs
{
    ApplicationType = <span style="color:#e6db74">&#34;web&#34;</span>,
    ResourceGroupName = resourceGroup.Name
});
</code></pre></div>
<h4 id="azure-application-insights-api-key">Azure Application Insights API Key</h4>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">var</span> appInsightApiKey = <span style="color:#66d9ef">new</span> AppInsights.ApiKey(<span style="color:#e6db74">&#34;ai&#34;</span>, <span style="color:#66d9ef">new</span> AppInsights.ApiKeyArgs
{
    ApplicationInsightsId = appInsights.Id,
    ReadPermissions = <span style="color:#e6db74">&#34;api&#34;</span>,
});
</code></pre></div>
<h4 id="azure-cognitive-service-key">Azure Cognitive Service Key</h4>

<p>Universal key for any Azure Cognitive Services used by your bot.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">var</span> luis = <span style="color:#66d9ef">new</span> Cognitive.Account(<span style="color:#e6db74">&#34;cs&#34;</span>, <span style="color:#66d9ef">new</span> Cognitive.AccountArgs
{
    Kind = <span style="color:#e6db74">&#34;CognitiveServices&#34;</span>, <span style="color:#75715e">// includes LUIS
</span><span style="color:#75715e"></span>    ResourceGroupName = resourceGroup.Name,
    Sku = <span style="color:#66d9ef">new</span> Cognitive.Inputs.AccountSkuArgs() { Name = <span style="color:#e6db74">&#34;S0&#34;</span>, Tier = <span style="color:#e6db74">&#34;Standard&#34;</span> }
});
</code></pre></div>
<h4 id="azure-app-service">Azure App Service</h4>

<p>The web (API) application uses the Azure AD details and any Cognitive Service keys declared earlier.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">var</span> app = <span style="color:#66d9ef">new</span> AppService(<span style="color:#e6db74">&#34;app&#34;</span>, <span style="color:#66d9ef">new</span> AppServiceArgs
{
    ResourceGroupName = resourceGroup.Name,
    AppServicePlanId = appServicePlan.Id,
    AppSettings =
    {
        { <span style="color:#e6db74">&#34;WEBSITE_RUN_FROM_PACKAGE&#34;</span>, codeBlobUrl },
        { <span style="color:#e6db74">&#34;MicrosoftAppId&#34;</span>, msa.ApplicationId },
        { <span style="color:#e6db74">&#34;MicrosoftAppPassword&#34;</span>, msaSecret.Value },
        { <span style="color:#e6db74">&#34;LuisApiKey&#34;</span>, luis.PrimaryAccessKey },
    },
    HttpsOnly = <span style="color:#66d9ef">true</span>
});
</code></pre></div>
<h4 id="azure-bot-service">Azure Bot Service</h4>

<p>Then finally the Azure Bot Service pieces it all together.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">var</span> bot = <span style="color:#66d9ef">new</span> Bot.WebApp(botName, <span style="color:#66d9ef">new</span> Bot.WebAppArgs
{
    DisplayName = botName,
    MicrosoftAppId = msa.ApplicationId,
    ResourceGroupName = resourceGroup.Name,
    Sku = <span style="color:#e6db74">&#34;F0&#34;</span>,
    Location = <span style="color:#e6db74">&#34;global&#34;</span>,
    Endpoint = Output.Format(<span style="color:#e6db74">$&#34;https://{app.DefaultSiteHostname}/api/messages&#34;</span>),
    DeveloperAppInsightsApiKey = appInsightApiKey.Key,
    DeveloperAppInsightsApplicationId = appInsights.AppId,
    DeveloperAppInsightsKey = appInsights.InstrumentationKey
});
</code></pre></div>
<h4 id="then-we-can-output-the-results">Then we can output the results</h4>

<p>Take the below outputs and put them straight into the Bot Framework Emulator and you&rsquo;ll be able to test the newly deployed bot.  Alternatively, use the Azure Portal Azure Bot Service - Test in Webchat feature.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-csharp" data-lang="csharp"><span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> Dictionary&lt;<span style="color:#66d9ef">string</span>, <span style="color:#66d9ef">object</span>&gt;
{
    { <span style="color:#e6db74">&#34;Bot Endpoint&#34;</span>, bot.Endpoint },
    { <span style="color:#e6db74">&#34;MicrosoftAppId&#34;</span>, msa.ApplicationId },
    { <span style="color:#e6db74">&#34;MicrosoftAppPassword&#34;</span>, msaSecret.Value }
};
</code></pre></div>
<p><img src="/img/pulumibutton.svg"></p>

<h3 id="execute-the-pulumi-cli">Execute the Pulumi CLI</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ pulumi stack init dev
$ az login
$ pulumi config set azure:location <span style="color:#e6db74">&#34;North Europe&#34;</span>
$ pulumi config set botName PulumiBot1
$ pulumi up</code></pre></div>
<h3 id="full-source-code-sample">Full source code sample</h3>

<p><del>At the time of writing I&rsquo;ve submitted a PR for a full sample here: <a href="https://github.com/pulumi/examples/pull/464" target="_blank">https://github.com/pulumi/examples/pull/464</a></del></p>

<p>Full sample published here: <a href="https://github.com/pulumi/examples/tree/master/azure-cs-botservice" target="_blank">https://github.com/pulumi/examples/tree/master/azure-cs-botservice</a></p>
]]></content>
        </item>
        
        <item>
            <title>Direct Line Speech</title>
            <link>https://jamied.me/posts/2019/10/direct-line-speech/</link>
            <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
            
            <guid>https://jamied.me/posts/2019/10/direct-line-speech/</guid>
            <description>Anne Uumellmahaye voice bot using Azure Bot Service: Direct Line Speech Recreating Anne Uumellmahaye using AI from the film The Man with Two Brains. Spooktacular fun with the Azure Bot Service using the Direct Line Speech channel and the Microsoft Cognitive Speech SDK.
Architecture Technologies used  Azure Bot Service and Direct Line Channel Bot Framework Microsoft Cognitive Services  Dispatcher LUIS QnA Maker Speech SDK  Azure Functions Spotify API UWP Raspberry Pi running Windows 10 IoT Halloween head  Who&amp;rsquo;s Freddy?</description>
            <content type="html"><![CDATA[

<h2 id="anne-uumellmahaye-voice-bot-using-azure-bot-service-direct-line-speech">Anne Uumellmahaye voice bot using Azure Bot Service: Direct Line Speech</h2>

<p>Recreating Anne Uumellmahaye using AI from the film The Man with Two Brains.  Spooktacular fun with the Azure Bot Service using the Direct Line Speech channel and the Microsoft Cognitive Speech SDK.</p>

<p><video src="/img/2brains.mp4" controls></p>

<h2 id="architecture">Architecture</h2>

<p><img src="/img/2brains_architecture.jpg"></p>

<h2 id="technologies-used">Technologies used</h2>

<ul>
<li>Azure Bot Service and Direct Line Channel</li>
<li>Bot Framework</li>
<li>Microsoft Cognitive Services

<ul>
<li>Dispatcher</li>
<li>LUIS</li>
<li>QnA Maker</li>
<li>Speech SDK</li>
</ul></li>
<li>Azure Functions</li>
<li>Spotify API</li>
<li>UWP</li>
<li>Raspberry Pi running Windows 10 IoT</li>
<li>Halloween head</li>
</ul>

<h2 id="who-s-freddy">Who&rsquo;s Freddy?</h2>

<p>See <a href="https://blogs.msdn.microsoft.com/jamiedalton/2016/11/03/building-a-physical-bot-using-the-botframework-freddythefishbot-futuredecoded-2016/" target="_blank">Freddy the fish</a></p>

<h2 id="resources">Resources</h2>

<ul>
<li><a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-service-channel-connect-directlinespeech?view=azure-bot-service-4.0" target="_blank">https://docs.microsoft.com/en-us/azure/bot-service/bot-service-channel-connect-directlinespeech?view=azure-bot-service-4.0</a></li>
<li><a href="https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-sdk" target="_blank">https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-sdk</a></li>
<li><a href="https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-synthesis-markup" target="_blank">https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/speech-synthesis-markup</a></li>
<li><a href="https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/language-support#text-to-speech" target="_blank">https://docs.microsoft.com/en-us/azure/cognitive-services/speech-service/language-support#text-to-speech</a></li>
<li><a href="https://docs.microsoft.com/en-us/azure/bot-service/?view=azure-bot-service-4.0" target="_blank">https://docs.microsoft.com/en-us/azure/bot-service/?view=azure-bot-service-4.0</a></li>
<li><a href="https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-tutorial-dispatch?view=azure-bot-service-4.0&amp;tabs=cs" target="_blank">https://docs.microsoft.com/en-us/azure/bot-service/bot-builder-tutorial-dispatch?view=azure-bot-service-4.0&amp;tabs=cs</a></li>
<li><a href="https://developer.spotify.com/" target="_blank">https://developer.spotify.com/</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Home Automation</title>
            <link>https://jamied.me/posts/2019/05/home-automation/</link>
            <pubDate>Thu, 09 May 2019 19:49:05 +0100</pubDate>
            
            <guid>https://jamied.me/posts/2019/05/home-automation/</guid>
            <description>I&amp;rsquo;ve been experimenting/playing with home automation for a while now, specifically SmartThings and their development environment. At first I was overwhelmed by it all as it seemed a steep learning curve, getting to grips with the Groovy IDE and terminology such as device handlers and SmartApps - but now it&amp;rsquo;s a labour of love.
First things first though, home automation is largely pointless, it&amp;rsquo;s un-necessary and will likely cause you more problems that it&amp;rsquo;s worth in the short term.</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve been experimenting/playing with home automation for a while now, specifically SmartThings and their development environment.  At first I was overwhelmed by it all as it seemed a steep learning curve, getting to grips with the Groovy IDE and terminology such as device handlers and SmartApps - but now it&rsquo;s a labour of love.</p>

<p>First things first though, home automation is largely pointless, it&rsquo;s un-necessary and will likely cause you more problems that it&rsquo;s worth in the short term.  However, from a developer and technology perspective - it&rsquo;s AWESOME.  You can spend literally hours configuring devices to trigger events and turn things on/off, dim or change colour of lights etc.  All at the expense of anyone else you live with, who will most likey hate it and just say &ldquo;really?&rdquo; when you&rsquo;ve finally got the postbox to make the lamp flash on/off.</p>

<p>The first smart device on the SmartThings ecosystem I acquired was a Samsung Smart Fridge.  As well as a speaker, this also has builtin sensors that report it&rsquo;s running temperature, how much energy it&rsquo;s using and whether either of the fridge/freezer doors are open/closed.  It also came with an ice dispenser, so my first challenge was to see if the sensors reported if it was dispensing ice or not (it doesn&rsquo;t).  This is where you head over to the SmartThings Live Logging feature to watch all the activity within your home automation graph.  So the fall-back plan was to play &ldquo;Ice Ice Baby&rdquo; by Vanilla Ice whenever the freezer door was opened.</p>

<p>I&rsquo;m an avid Spotify user and subscribe to the Premium service, this give me access to Spotify Connect - allowing me to target individual playback devices.  Crucially, Spotify has an API that allows you to control what music track gets played and on what device as well as controlling things such as the volume.  So the next challenge was how to invoke the Spotify API from SmartThings.  I initially thought about invoking it directly from a custom SmartApp, however this would have involved a fair amount of code in Groovy and I didn&rsquo;t want to write sluggish code that was going to grind other SmartApps down or timeout.  Instead I went with a server-side approach, creating a lighter weight SmartApp that invokes an Azure Function which does the grunt work - automating Spotify via the API.  To make life even easier, I discovered a nuget package by Jonas Dellinger that wraps the Spotify API into a simple SDK.</p>

<p>I&rsquo;ve had some fun (and tears) with this project, but it&rsquo;s amazing what automation scenarios you can achieve.  For instance - I now have a &ldquo;Game&rdquo; mode for the entire house.  Using a little device from the team at <a href="https://konnected.io" target="_blank">https://konnected.io</a> I&rsquo;ve been able to convert the existing alarm sensors around the house into SmartThings sensors.  So, not only can I trigger different music from different sensors, I can choose where the music gets played, what lights to flash and so on ;)</p>

<p>The full source code is available here: <a href="https://github.com/daltskin/ST-HomeAutomation" target="_blank">https://github.com/daltskin/ST-HomeAutomation</a></p>
]]></content>
        </item>
        
        <item>
            <title>New Home</title>
            <link>https://jamied.me/posts/2019/04/new-home/</link>
            <pubDate>Tue, 16 Apr 2019 16:44:23 +0100</pubDate>
            
            <guid>https://jamied.me/posts/2019/04/new-home/</guid>
            <description>Yes, I&amp;rsquo;ve moved my online home from https://blogs.msdn.microsoft.com/jamiedalton to here. Moving my site to Hugo using a static content builder will hopefully mean that I can blog more often, and now that I&amp;rsquo;m outside the blogs.msdn.microsoft.com domain I can write and share other technical articles or things that I&amp;rsquo;ve been working with.
So speaking of which, leads me to my upcoming next post about Home Automation&amp;hellip;</description>
            <content type="html"><![CDATA[<p>Yes, I&rsquo;ve moved my online home from <a href="https://blogs.msdn.microsoft.com/jamiedalton" target="_blank">https://blogs.msdn.microsoft.com/jamiedalton</a> to here.  Moving my site to Hugo using a static content builder will hopefully mean that I can blog more often, and now that I&rsquo;m outside the blogs.msdn.microsoft.com domain I can write and share other technical articles or things that I&rsquo;ve been working with.</p>

<p>So speaking of which, leads me to my upcoming next post about Home Automation&hellip;</p>
]]></content>
        </item>
        
    </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hello_world</title>
    <link>https://jamied.me/</link>
    <description>Recent content on Hello_world</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 23 Dec 2020 20:04:40 +0000</lastBuildDate>
    
	<atom:link href="https://jamied.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Smart Home Multiplayer Bomb Disposal Game</title>
      <link>https://jamied.me/posts/2020/12/smart-home-multiplayer-bomb-disposal-game/</link>
      <pubDate>Wed, 23 Dec 2020 20:04:40 +0000</pubDate>
      
      <guid>https://jamied.me/posts/2020/12/smart-home-multiplayer-bomb-disposal-game/</guid>
      <description>About 18 months ago I shared some insight into some home automation I&amp;rsquo;d added that turned the whole house into a game zone. This has been pretty useful during the recent covid lockdown and provided much entertainment for the family. This post is to explain how it works.
Game objective Find and defuse the bomb without getting spotted. A baddie has hidden a bomb somewhere around the house, the bomb disposal team have to locate it and defuse it using the key - without activating any of the house alarm sensors.</description>
    </item>
    
    <item>
      <title>Troubleshooting ARM DeploymentScripts</title>
      <link>https://jamied.me/posts/2020/12/troubleshooting-arm-deploymentscripts/</link>
      <pubDate>Tue, 22 Dec 2020 15:41:28 +0000</pubDate>
      
      <guid>https://jamied.me/posts/2020/12/troubleshooting-arm-deploymentscripts/</guid>
      <description>The new ARM resource type Microsoft.Resources/deploymentScripts allows you to execute scripts within template deployments, capture the script outputs and re-use them later within the rest of the template.
Whilst the documentation goes some way to help you monitor and troubleshoot when the script doesn&amp;rsquo;t work as planned using the provided script service storage accounts, out of the box,I didn&amp;rsquo;t find these particularly helpful to identify why I wasn&amp;rsquo;t getting the required outputs from my inline bash script.</description>
    </item>
    
    <item>
      <title>GitHub Webhooks With C# Azure Functions and SmartThings</title>
      <link>https://jamied.me/github-webhooks-with-azure-functions-and-smartthings/</link>
      <pubDate>Sun, 16 Aug 2020 19:54:39 +0100</pubDate>
      
      <guid>https://jamied.me/github-webhooks-with-azure-functions-and-smartthings/</guid>
      <description>Ever since I saw Martin WoodWard&amp;rsquo;s Brian the Build Bunny for Team Foundation Server over 12 years ago, I&amp;rsquo;ve been fascinated by creating signals for continuous integration builds. Following on from my last post, where I walk through creating and setting up a GitHub Webhook with Azure Functions, the next logical step was to integrate this to SmartThings for complete home automation.
SmartThings has a new REST API, which I&amp;rsquo;ve created and released a SmartThings NET library, which gives you the ability to interrogate your SmartThings home automation ecosystem entirely using dotnet.</description>
    </item>
    
    <item>
      <title>GitHub Webhooks With C# Azure Functions</title>
      <link>https://jamied.me/github-webhooks-with-azure-functions/</link>
      <pubDate>Tue, 21 Jul 2020 21:50:17 +0100</pubDate>
      
      <guid>https://jamied.me/github-webhooks-with-azure-functions/</guid>
      <description>Recently I wanted to build a GitHub webhook using C# Azure Functions, but could only find an example template using Node.js. Here, I set out to create a webhook to check the overall status of a build. This is something I was doing around 10 years ago with Team Foundation Server, so thought it would be fun to get this up and running with GitHub Actions.
Check Suites Looking at the available webhook events there wasn&amp;rsquo;t an obvious event I could subscribe to get what I wanted.</description>
    </item>
    
    <item>
      <title>LUIS DevOps with Github Actions</title>
      <link>https://jamied.me/posts/2020/05/luis-devops-with-github-actions/</link>
      <pubDate>Thu, 21 May 2020 16:58:32 +0100</pubDate>
      
      <guid>https://jamied.me/posts/2020/05/luis-devops-with-github-actions/</guid>
      <description>Implementing good DevOps practices with the LUIS Cognitive Service has been traditionally hard. Largely because the initial focus of the service has been on the underlying performance and on the portal experience - making a complex machine learning problem easy to use by any developer. In fact, now the portal is so easy to use, it can be used by non-developers too, such as business folk and even content editors.</description>
    </item>
    
    <item>
      <title>Windows Terminal Command Line</title>
      <link>https://jamied.me/posts/2020/02/windows-terminal-command-line/</link>
      <pubDate>Fri, 14 Feb 2020 14:01:08 +0000</pubDate>
      
      <guid>https://jamied.me/posts/2020/02/windows-terminal-command-line/</guid>
      <description>Following on from my previous post about WSL Shortcuts - Windows Terminal v0.9 Release finally introduces command line support.
You can now combine this with an old File Explorer task bar trick to bootstrap your awesomeness.
Windows Files Explorer &amp;amp; Windows Terminal All of command line parameters that are supported are documented here. One nice trick is using split-pane to support different platforms simultaneously. So the following will open up a pane with both Powershell and Ubuntu side-by-side :)</description>
    </item>
    
    <item>
      <title>WSL Shortcuts</title>
      <link>https://jamied.me/posts/2019/11/wsl-shortcuts/</link>
      <pubDate>Mon, 25 Nov 2019 09:24:13 +0000</pubDate>
      
      <guid>https://jamied.me/posts/2019/11/wsl-shortcuts/</guid>
      <description>A while back I posted a couple of Windows productivity tips:
 File Explorer &amp;lt;&amp;gt; Command Prompt
 File Explorer &amp;gt; VS Code
  Windows Files Explorer &amp;amp; WSL.EXE Now that Windows SubSystem Linux is here, what if we want to drop straight from Windows File Explorer to, for example, the Ubuntu command line? So, assuming you have WSL already setup, type wsl straight into the Windows Explorer bar:</description>
    </item>
    
    <item>
      <title>WebWindow</title>
      <link>https://jamied.me/posts/2019/11/webwindow/</link>
      <pubDate>Thu, 21 Nov 2019 21:00:00 +0000</pubDate>
      
      <guid>https://jamied.me/posts/2019/11/webwindow/</guid>
      <description>This week Steve Sanderson blogged again, this time introducing his latest wizardry WebWindow - a lightweight cross-platform webview library for .NET Core.
He also shared the full source code and provided some great examples on what&amp;rsquo;s possible:
I&amp;rsquo;ve spent the last couple of evenings experimenting with this a bit. Whilst it&amp;rsquo;s &amp;lsquo;super-pre-alpha quality&amp;rsquo;, it&amp;rsquo;s pretty damn awesome.
Docker Using this in conjunction with Docker.DotNet was my first experiment. Rather than bring web content into the project, why not let Docker do the local hosting.</description>
    </item>
    
    <item>
      <title>Pulumi Azure Bot Service</title>
      <link>https://jamied.me/posts/2019/11/pulumi-azure-bot-service/</link>
      <pubDate>Sun, 17 Nov 2019 20:08:06 +0000</pubDate>
      
      <guid>https://jamied.me/posts/2019/11/pulumi-azure-bot-service/</guid>
      <description>Pulumi IaaC =&amp;gt; IaaC# (Infrastructure as CSharp) - Deploying Azure bots with Pulumi I&amp;rsquo;ll admit that, until a week ago, I had never heard of Pulumi, but when they recently announced support for .NET - they got my attention. I&amp;rsquo;ve worked alot with JSON based Azure Resource Manager (ARM) templates in the past - but these quickly become complicated to author when you have many different Azure resources.
Whilst Terraform offers it&amp;rsquo;s own HashiCorp Configuration Language (HCL), that or working with YAML makes a bit of me want to die - the syntax seems we&amp;rsquo;ve gone back an era in computing.</description>
    </item>
    
    <item>
      <title>Direct Line Speech</title>
      <link>https://jamied.me/posts/2019/10/direct-line-speech/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://jamied.me/posts/2019/10/direct-line-speech/</guid>
      <description>Anne Uumellmahaye voice bot using Azure Bot Service: Direct Line Speech Recreating Anne Uumellmahaye using AI from the film The Man with Two Brains. Spooktacular fun with the Azure Bot Service using the Direct Line Speech channel and the Microsoft Cognitive Speech SDK.
Architecture Technologies used  Azure Bot Service and Direct Line Channel Bot Framework Microsoft Cognitive Services  Dispatcher LUIS QnA Maker Speech SDK  Azure Functions Spotify API UWP Raspberry Pi running Windows 10 IoT Halloween head  Who&amp;rsquo;s Freddy?</description>
    </item>
    
  </channel>
</rss>